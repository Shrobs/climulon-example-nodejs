{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for Climulon NodeJs Example (INFRA)",
  "Parameters": {
    "ElbName": {
      "Type": "String",
      "Description": "Name of the front-facing ELB"
    },
    "ElbHealthcheckTarget": {
      "Type": "String",
      "Description": "Target of the ELB healthcheck"
    },
    "VpcCidrBlock": {
      "Type": "String",
      "Description": "CIDR block of the provisionned VPC",
      "Default": "10.99.0.0/16"
    },
    "SubnetAz1Cidr": {
      "Type": "String",
      "Description": "CIDR block of the first subnet in az1",
      "Default": "10.99.0.0/24"
    },
    "SubnetAz2Cidr": {
      "Type": "String",
      "Description": "CIDR block of the second subnet in az2",
      "Default": "10.99.1.0/24"
    }
  },
  "Resources": {
    "Vpc": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : {
          "Ref": "VpcCidrBlock"
        },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true"
      }
    },
    "SubnetAz1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "SubnetAz1Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "SubnetAz2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Ref": "SubnetAz2Cidr"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteViaIgw": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicRouteViaIgw": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetAz1"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "Subnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "SubnetAz2"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "ElbName"
              },
              "app"
            ]
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "ElbSecurityGroup"
          }
        ],
        "CrossZone": true,
        "Subnets": [
          {
            "Ref": "SubnetAz1"
          },
          {
            "Ref": "SubnetAz2"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Ref": "ElbHealthcheckTarget"
          },
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "20",
          "Timeout": "5"
        }
      }
    },
    "ElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ELB Allowed Ports",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SharedSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Link ECS and Redis stack",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    }
  },
  "Outputs": {
    "VPC":{
      "Description": "VPC id", 
      "Value": {
        "Ref": "Vpc"
      }
    },
    "ELBURL": {
      "Description": "ELB URL",
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "DNSName"
        ]
      }
    },
    "ELBName": {
      "Description": "ELB name",
      "Value": {
        "Ref": "ELB"
      }
    },
    "ELBSg": {
      "Description": "ELB security group ID",
      "Value": {
        "Fn::GetAtt": [
          "ElbSecurityGroup",
          "GroupId"
        ]
      }
    },
    "SharedSg": {
      "Description": "Shared (ECS/RDS) security group ID",
      "Value": {
        "Fn::GetAtt": [
          "SharedSecurityGroup",
          "GroupId"
        ]
      }
    },
    "SUBNETIDS": {
      "Description": "Ids of the two created subnets",
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "SubnetAz1"
            },
            {
              "Ref": "SubnetAz2"
            }
          ]
        ]
      }
    }
  }
}